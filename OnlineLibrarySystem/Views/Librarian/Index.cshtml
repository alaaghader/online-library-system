@section AddToHead {
    <style type="text/css">
        #table .form-control-plaintext {
            border-width: 1px;
            border-radius: .25rem;
            padding: 12px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        #table td {
            padding: 0px !important;
        }

        #table .form-control-plaintext:focus {
            outline: none;
        }

        #table input.form-control-plaintext:active {
            background-color: lightgrey;
        }

        #table input.form-control-plaintext:hover {
            border: 1px dashed red;
            outline: none;
        }

        #table .form-control-plaintext:not([type="text"]) {
            user-select: none;
            cursor: pointer;
        }
    </style>
}

<div class="container mb-5">
    <form>
        <div class="overflow-x-auto overflow-y-hidden shadow-sm border rounded p-0 m-0 mt-5">
            <table class="table table-hover m-0 p-0 mw-100">
                <thead class="thead-light">
                    <tr>
                        <th colspan="9">
                            <div class="row m-0">
                                <button class="btn btn-sm btn-default">
                                    <span class="oi oi-magnifying-glass"></span>
                                </button>
                                <div class="col px-3">
                                    <input id="search" class="form-control-plaintext remove-outline form-control-sm" type="text" placeholder="Search for a specific book" />
                                </div>
                                <div class="col-auto px-2">
                                    <button data-toggle="popover" data-content="Cancel changes and reload" class="btn btn-sm btn-default" onclick="window.location.reload(true)">
                                        <span class="oi oi-reload"></span>
                                    </button>
                                    <span class="px-1"></span>
                                    <button class="btn btn-sm btn-primary">Add a new book</button>
                                </div>
                            </div>
                        </th>
                    </tr>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Author</th>
                        <th>Publisher</th>
                        <th>Publishing date</th>
                        <th>Quantity</th>
                        <th colspan="2">Options</th>
                        <th>
                            <button data-placement="right" data-toggle="popover" data-content="Click on any field to edit" class="btn btn-sm btn-default py-0">
                                <span class="oi oi-question-mark"></span>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody id="table"></tbody>
                <tfoot class="thead-light">
                    <tr>
                        <th colspan="9">
                            <small class="font-weight-light d-inline-block d-flex justify-content-center flex-row px-3">
                                <button id="prev" class="btn-sm btn-borderless rounded-circle oi oi-caret-left"></button>
                                <span><input type="number" id="page" class="control-xs" min="1" value="1" /> out of <span id="outOf">100</span></span>
                                <button id="next" class="btn-sm btn-borderless rounded-circle oi oi-caret-right"></button>
                            </small>
                        </th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </form>
</div>

@section scripts {
    <script type="text/javascript">

        (function () {

            var authors;
            var publishers;
            var books;
            var totalCount;
            var page = 1;
            var lastPage;
            var pageSize = 20;
            var key = '';

            // load data to be used
            function loadData() {

                // load authors
                var a1 = $.ajax({
                    url: 'api/ApiBook/GetAuthors',
                    success: function (res) {
                        authors = [{ value: -1, data: 'None' }];
                        for (var i = 0; i < res.length; i++) {
                            authors.push({
                                value: res[i].AuthorId,
                                data: res[i].AuthorName
                            });
                        }
                    }
                });
                // load publishers
                var a2 = $.ajax({
                    url: 'api/ApiBook/GetPublishers',
                    success: function (res) {
                        publishers = [{ value: -1, data: 'None' }];
                        for (var i = 0; i < res.length; i++) {
                            publishers.push({
                                value: res[i].PublisherId,
                                data: res[i].PublisherName
                            });
                        }
                    }
                });
                // load books
                var a3 = $.ajax({
                    url: 'api/ApiBook/LibrarianSearch',
                    data: {
                        key: key,
                        page: page,
                        pageSize: pageSize
                    },
                    success: function (res) {
                        books = res.Results;
                        totalCount = res.TotalCount;
                    }
                });
                // after all ajax calls are done
                $.when(a1, a2, a3).then(fillData);
            }

            // fill books in table
            function fillData() {
                var $table = $('#table');

                // clear old content
                $table.html('');

                // transform float to closest greater than or equal integer
                // ex: 0.6 | 1 = 1, 2.0 | 1 = 2 etc...
                lastPage = (totalCount / pageSize) | 1;
                $('#page').attr('max', lastPage);
                $('#outOf').html(lastPage);

                // disable pagination next or prev case current page is first or last page
                if (page <= 1) $('#prev').attr('disabled', true);
                else $('#prev').attr('disabled', null);
                if (page >= lastPage) $('#next').attr('disabled', true);
                else $('#next').attr('disabled', null);

                for (var i = 0; i < books.length; i++) {

                    // add a table row
                    var $tr = $(createBookRow(books[i]));
                    $table.append($tr);
                    // reference the row in the books array
                    books[i].$elem = $tr;

                    // pass a copy of $tr to this inner function and call instantly
                    (function (currentTr) {
                        // activate autocomplete custom component
                        currentTr.find('.AuthorName')._autocomplete(authors, {
                            selectAction: function (currentContent, $input) {
                                var $tmp = currentTr.find('.AuthorId');
                                $tmp.val(currentContent.value);
                                $tmp.addClass('changed');
                            },
                            addAction: function () {
                                // add a new author call api
                            }
                        });
                        currentTr.find('.PublisherName')._autocomplete(publishers, {
                            selectAction: function (currentContent, $input) {
                                var $tmp = currentTr.find('.PublisherId');
                                $tmp.val(currentContent.value);
                                $tmp.addClass('changed');
                            },
                            addAction: function () {
                                // add a new publisher call api
                            }
                        });
                        currentTr.find('.form-control-plaintext').on('change keyup', function () {
                            // this input has changed, send this to the server when save is clicked
                            $(this).addClass('changed');
                            currentTr.find('.save').attr('disabled', null);
                            // disable other rows, focus on this one
                            for (var j = 0; j < books.length; j++) {
                                if (books[j].BookId != currentTr.attr('data-bookId')) {
                                    books[j].$elem.css('opacity', 0.5);
                                    books[j].$elem.find('input').attr('disabled', true);
                                }
                            }
                        });
                        currentTr.find('.save').click(function () {
                            var $BookTitle = currentTr.find('.BookTitle');
                            var $BookDescription = currentTr.find('.BookDescription');
                            var $AuthorId = currentTr.find('.AuthorId');
                            var $PublisherId = currentTr.find('.PublisherId');
                            var $PublishingDate = currentTr.find('.PublishingDate');
                            var $Quantity = currentTr.find('.Quantity');
                            function getChangedData($dom) {
                                return $dom.hasClass('changed') ? $dom.val() : null;
                            }
                            $.ajax({
                                url: 'api/ApiBook/UpdateBook',
                                type: "post",
                                data: {
                                    BookId: currentTr.attr('data-bookId'),
                                    BookTitle: getChangedData($BookTitle),
                                    BookDescription: getChangedData($BookDescription),
                                    AuthorId: getChangedData($AuthorId),
                                    PublisherId: getChangedData($PublisherId),
                                    PublishingDate: getChangedData($PublishingDate),
                                    Quantity: getChangedData($Quantity),
                                    Token: $('#Token').val()
                                },
                                success: function (res) {
                                    if (res) {
                                        window.location.reload(true);
                                    } else {
                                        Alert(_errorMsg, 'Make sure your data is valid!');
                                    }
                                },
                                error: function () {
                                    Alert(_errorMsg, _errorAdmin);
                                }
                            });
                        });
                    })($tr);
                }
            }

            function initSearch() {
                $('#search').on('change keyup', refreshTable);
                $('#page').on('change keyup', refreshTable);
                $('#next').click(function () {
                    $('#page')[0].value++;
                    refreshTable();
                });
                $('#prev').click(function () {
                    $('#page')[0].value--;
                    refreshTable();
                });
            }

            function refreshTable() {
                key = $('#search').val();
                page = $('#page').val();
                loadData();
            }

            $(document).ready(function () {
                loadData();
                initSearch();
            });

        })();
    </script>
}